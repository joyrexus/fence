// Generated by CoffeeScript 1.6.1
(function() {
  var arrayEgal, arrayEq, color, egal, eq, failures, key, log, methods, ok, passed, print, start, test, total, value;

  ok = require('assert').ok;

  print = console.log;

  start = new Date;

  total = passed = 0;

  failures = [];

  color = {
    bold: '\x1B[0;1m',
    red: '\x1B[0;31m',
    green: '\x1B[0;32m',
    reset: '\x1B[0m'
  };

  log = function(name, message) {
    return print(color[name] + message + color.reset);
  };

  test = function(desc, fn) {
    ++total;
    try {
      fn.desc = desc;
      fn.call(fn);
      return ++passed;
    } catch (e) {
      if (desc != null) {
        e.desc = desc;
      }
      if (fn.toString != null) {
        e.source = fn.toString();
      }
      return failures.push(e);
    }
  };

  egal = function(a, b) {
    if (a === b) {
      return a !== 0 || 1 / a === 1 / b;
    } else {
      return a !== a && b !== b;
    }
  };

  arrayEgal = function(a, b) {
    var el, idx, _i, _len;
    if (egal(a, b)) {
      return true;
    } else if (a instanceof Array && b instanceof Array) {
      if (a.length !== b.length) {
        return false;
      }
      for (idx = _i = 0, _len = a.length; _i < _len; idx = ++_i) {
        el = a[idx];
        if (!arrayEgal(el, b[idx])) {
          return false;
        }
      }
      return true;
    }
  };

  eq = function(a, b, msg) {
    return ok(egal(a, b), msg != null ? msg : a + ' is not ' + b);
  };

  arrayEq = function(a, b, msg) {
    return ok(arrayEgal(a, b), msg);
  };

  test.status = function() {
    var fail, failed, msg, sec, _i, _len;
    failed = failures.length;
    sec = ((Date.now() - start) / 1000).toFixed(2);
    msg = "passed " + passed + " tests in " + sec + " seconds" + color.reset;
    if (!failed) {
      return log('green', msg);
    }
    log('red', "failed " + failed + " tests and " + msg);
    for (_i = 0, _len = failures.length; _i < _len; _i++) {
      fail = failures[_i];
      print("");
      if (fail.desc) {
        log('red', "" + fail.desc + " / " + fail.message);
      }
      if (fail.name) {
        log('red', "  " + fail.name);
      }
      if (fail.expected) {
        log('red', "  Expected " + fail.expected + " not " + fail.actual);
      }
      if (fail.source) {
        print(' ', fail.source);
      }
    }
  };

  methods = {
    print: print,
    color: color,
    log: log,
    test: test,
    ok: ok,
    eq: eq,
    arrayEq: arrayEq,
    arrayEgal: arrayEgal
  };

  for (key in methods) {
    value = methods[key];
    exports[key] = value;
  }

}).call(this);
